from telegram import *
from telegram.ext import *
from sheet_parser import Sheet
import os
from functools import partial
import json


TOKEN = os.environ.get('TOKEN')

ALL_NAMES = ['–ê–π—Ç—ã–Ω–±–µ—Ç–æ–≤–∞ –ö–∞—Ä–∏–Ω–∞ –†—É—Å—Ç–∞–º–æ–≤–Ω–∞', '–ë–µ–ª–æ–∑–æ—Ä –í–ª–∞–¥–∏—Å–ª–∞–≤ –í–∞–ª–µ–Ω—Ç–∏–Ω–æ–≤–∏—á', '–ë—É–∫—Ä–µ–µ–≤–∞ –î–∞—Ä—å—è', '–í—É–∫–æ–ª–æ–≤ –¢–∏–º—É—Ä –Æ—Ä—å–µ–≤–∏—á', '–ì–æ—Ä–µ–≤ –ú–∞–∫—Å–∏–º –ê–Ω–¥—Ä–µ–µ–≤–∏—á', '–ó–∏—Å—Å–µ—Ä–º–∞–Ω –ï–ª–µ–Ω–∞ –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞', '–ó–æ–ª–æ—Ç–æ–≤ –ù–∏–∫–∏—Ç–∞ –ú–∏—Ö–∞–π–ª–æ–≤–∏—á', '–ò–±—Ä–∞–≥–∏–º–æ–≤ –ú—É—Ö–∞–º–º–∞–¥ ', '–ö–∏—à–∫–æ –†–æ–º–∞–Ω –î–º–∏—Ç—Ä–∏–µ–≤–∏—á', '–ö–æ–≥–∞–Ω –û–ª—å–≥–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞', '–ö–æ–ª–æ–¥—è–∂–Ω—ã–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–Ω—Ç–æ–Ω–æ–≤–∏—á', '–ö—Ä–∞–π–Ω–æ–≤ –§–µ–¥–æ—Ä –ü–∞–≤–ª–æ–≤–∏—á', '–ö—É–∑—è–∫–∏–Ω –õ–µ–æ–Ω–∏–¥ –î–º–∏—Ç—Ä–∏–µ–≤–∏—á', '–õ–µ–≤–∞–¥–Ω—ã–π –ï–≥–æ—Ä –§–∏–ª–∏–ø–ø–æ–≤–∏—á', '–ú–∞—Ä–∫–æ–≤–∞ –û–ª—å–≥–∞ –ò–≥–æ—Ä–µ–≤–Ω–∞', '–ú–æ—Å—Ç–æ–≤–æ–π –ù–∏–∫–æ–ª–∞–π –°–µ—Ä–≥–µ–µ–≤–∏—á', '–ü–µ—Ç—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –û–ª–µ–≥–æ–≤–∏—á', '–ü–∏—Ü—É—Ö–∞ –ì—Ä–∏–≥–æ—Ä–∏–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á', '–†–∞–ª—å–Ω–∏–∫–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ú–∞–∫—Å–∏–º–æ–≤–∏—á', '–†–æ–∂–∏—Ü—ã–Ω –í–ª–∞–¥–∏—Å–ª–∞–≤ –ê–ª–µ–∫—Å–µ–µ–≤–∏—á', '–†–æ–º–∞—à–æ–≤ –ò–≤–∞–Ω –ê–Ω–¥—Ä–µ–µ–≤–∏—á', '–†—É—Å—Ç–∞–º–æ–≤ –•—É—Ä—à–∏–¥–±–µ–∫ –£–º–∏–¥–±–µ–∫ –£–≥–ª–∏', '–°–∞—Ñ–æ–Ω–æ–≤ –ê–Ω–¥—Ä–µ–π –ò–≥–æ—Ä–µ–≤–∏—á', '–°–∏–¥–æ—Ä–æ–≤ –î–∞–Ω–∏–∏–ª –ú–∏—Ö–∞–π–ª–æ–≤–∏—á', '–°–ª–∞–ø–∏–∫ –ê–ª—ë–Ω–∞ –ò–≥–æ—Ä–µ–≤–Ω–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –ò—Ä–∏–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞', '–°–æ–±–æ–ª—å –í–ª–∞–¥–∏–º–∏—Ä', '–°—Ç—Ä–µ–ª—å–Ω–∏–∫–æ–≤–∞ –ú–∞—Ä–∏—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞', '–°—Ç—Ä–∏–≥–∞–ª–µ–≤ –ê–Ω–¥—Ä–µ–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á', '–•–∞–º–¥–∞–º–∂–∞–Ω–æ–≤–∞ –§–µ—Ä—É–∑–∞', '–¶–æ–π –ö–∏—Ä–∏–ª–ª –ê—Ä–∫–∞–¥—å–µ–≤–∏—á', '–ß–∞–±–∞–Ω –ê–Ω–¥—Ä–µ–π –ò–≤–∞–Ω–æ–≤–∏—á', '–®–µ–≤–µ–ª—ë–≤–∞ –í–µ—Ä–æ–Ω–∏–∫–∞ –ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞', '–Ø—Ä–∫–æ–≤–∞—è –õ—é–¥–º–∏–ª–∞ –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞']

MAIN_MENU_BUTTONS = [["üî¢–í—ã—à–º–∞—Ç", "üçé–§–∏–∑–∏–∫–∞"], ["üë§–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û"]]

def mainMenu(update: Update, context: CallbackContext):
    if update.effective_chat.id not in NAMES:
        context.bot.send_message(chat_id=update.effective_chat.id, text="üë§–§–ò–û –Ω–µ –∑–∞–¥–∞–Ω–æ", reply_markup=ReplyKeyboardMarkup([["üë§–ó–∞–¥–∞—Ç—å –§–ò–û"]], resize_keyboard=True))
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text="üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))

    return ConversationHandler.END

def askForName(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text="üë§–í–≤–µ–¥–∏—Ç–µ –§–ò–û", reply_markup=ReplyKeyboardRemove())

    return 0

def backupNames():
    with open("names.json", "w") as output:
        output.write(json.dumps(NAMES))

def setName(update: Update, context: CallbackContext):
    name = update.message.text
    if name not in ALL_NAMES:
        context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå–§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        NAMES[update.effective_chat.id] = name
        context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ–§–ò–û –∑–∞–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    mainMenu(update, context)

    backupNames()

    return ConversationHandler.END

setNameConvHandler = ConversationHandler(
    entry_points=[MessageHandler(Filters.regex("üë§–ó–∞–¥–∞—Ç—å –§–ò–û"), askForName), MessageHandler(Filters.regex("üë§–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û"), askForName)],

    states={
        0: [MessageHandler(Filters.text, setName)]
    },

    fallbacks=[]
)

def viewMath(update: Update, context: CallbackContext):
    buttons = [["üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é"], ["–ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã"], ["–ë–∞–ª–ª—ã –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å"], ["–ë–∞–ª–ª—ã –∑–∞ –æ–∫—Ç—è–±—Ä—å"]]
    context.bot.send_message(chat_id=update.effective_chat.id, text="üî¢–í—ã—à–º–∞—Ç", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))

    return 0

def viewMathPoints(update: Update, context: CallbackContext, month: str = None):
    if month is None:
        values = math_sheet.getValues("–ë–∞–ª–ª—ã –∏—Ç–æ–≥–æ–≤—ã–µ!A2:B35")
        text = "–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {}"
    else:
        match month:
            case "september":
                values = math_sheet.getValues("–ë–∞–ª–ª—ã (—Å–µ–Ω—Ç—è–±—Ä—å)!A2:B35")
                text = "–ë–∞–ª–ª–æ–≤ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å: {}"
            case "october":
                values = math_sheet.getValues("–ë–∞–ª–ª—ã (–æ–∫—Ç—è–±—Ä—å)!A2:B35")
                text = "–ë–∞–ª–ª–æ–≤ –∑–∞ –æ–∫—Ç—è–±—Ä—å: {}"

    points = None
    for row in values:
        if row[0] == NAMES[update.effective_chat.id]:
            points = row[1]
            break
    if points is None:
        context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå–ë–∞–ª–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text=text.format(points))
    
    mainMenu(update, context)

    return ConversationHandler.END

viewMathConvHandler = ConversationHandler(
    entry_points=[MessageHandler(Filters.regex("üî¢–í—ã—à–º–∞—Ç"), viewMath)],

    states={
        0: [CommandHandler("start", mainMenu), MessageHandler(Filters.regex("üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é"), mainMenu), MessageHandler(Filters.regex("–ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã"), viewMathPoints), MessageHandler(Filters.regex("–ë–∞–ª–ª—ã –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å"), partial(viewMathPoints, month="september")), MessageHandler(Filters.regex("–ë–∞–ª–ª—ã –∑–∞ –æ–∫—Ç—è–±—Ä—å"), partial(viewMathPoints, month="october"))]
    },

    fallbacks=[]
)

def viewPhys(update: Update, context: CallbackContext):
    buttons = [["üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é"], ["–ü—Ä—è–Ω–∏–∫–∏"]]
    context.bot.send_message(chat_id=update.effective_chat.id, text="üçé–§–∏–∑–∏–∫–∞", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))

    return 0

def viewPhysPoints(update: Update, context: CallbackContext):
    values = phys_sheet.getValues("–ë–∞–ª–ª—ã!A2:B35")
    points = None
    for row in values:
        if row[0] == NAMES[update.effective_chat.id]:
            points = row[1]
            break
    if points is None:
        context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå–ë–∞–ª–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text="–í—Å–µ–≥–æ –ø—Ä—è–Ω–∏–∫–æ–≤: {}".format(points))
    
    mainMenu(update, context)

    return ConversationHandler.END

viewPhysConvHandler = ConversationHandler(
    entry_points=[MessageHandler(Filters.regex("üçé–§–∏–∑–∏–∫–∞"), viewPhys)],

    states={
        0: [CommandHandler("start", mainMenu), MessageHandler(Filters.regex("üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é"), mainMenu), MessageHandler(Filters.regex("–ü—Ä—è–Ω–∏–∫–∏"), viewPhysPoints)]
    },

    fallbacks=[]
)

def updateSheets(update: Update = None, context: CallbackContext = None):
    global math_sheet
    math_sheet = Sheet('1hEngBbbJQkBpfTjC0qbcsZld-edUK8dinQwnQ8_PgSM')
    global phys_sheet
    phys_sheet = Sheet('1Tg4YYjRfXDSbrSAhNH3kEMp-ukiPejnuEECTy7NUS9Y')

def main():
    global NAMES
    if os.path.isfile("names.json"):
        NAMES = json.load(open("names.json"))
        NAMES = {int(i) : NAMES[i] for i in NAMES}
    else:
        NAMES = {}

    updateSheets()

    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", mainMenu))
    dispatcher.add_handler(CommandHandler("update", updateSheets))
    dispatcher.add_handler(CommandHandler("menu", mainMenu))
    dispatcher.add_handler(setNameConvHandler)
    dispatcher.add_handler(viewMathConvHandler)
    dispatcher.add_handler(viewPhysConvHandler)

    updater.start_polling()

if __name__ == "__main__":
    main()